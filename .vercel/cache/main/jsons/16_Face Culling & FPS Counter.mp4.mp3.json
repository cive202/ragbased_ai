{
    "chunks": [
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 0.0,
            "end": 4.72,
            "text": " Today I'll show you what face calling is and how it affects performance."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 4.72,
            "end": 9.72,
            "text": " We are also going to measure this performance change by making an FPS counter."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 9.72,
            "end": 14.44,
            "text": " So face calling is a step in the graphics pipeline that decides if a triangle will move"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 14.44,
            "end": 19.44,
            "text": " onto the fragment shader, aka if the triangle will be drawn or not."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 19.44,
            "end": 24.12,
            "text": " Open jail decides this by seeing which side of the triangle is currently facing the camera."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 24.12,
            "end": 29.04,
            "text": " Generally speaking, in most 3D graphics programs it is the front side of a triangle that is"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 29.04,
            "end": 33.28,
            "text": " sent to the fragment shader and the back side of a triangle that is discarded."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 33.28,
            "end": 38.72,
            "text": " The way open jail figures out which side is switched is by an index convention which can"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 38.72,
            "end": 41.72,
            "text": " either be clockwise or counterclockwise."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 41.72,
            "end": 47.120000000000005,
            "text": " In a counterclockwise framework, if the order of the indices of a triangle are counterclockwise"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 47.120000000000005,
            "end": 51.04,
            "text": " when facing us, then the side we see is the front side."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 51.04,
            "end": 56.480000000000004,
            "text": " Likewise, if the order of the indices of a triangle are clockwise when facing us, then"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 56.480000000000004,
            "end": 59.0,
            "text": " the side we see is the back side."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 59.0,
            "end": 62.24,
            "text": " For a clockwise framework, it's the exact opposite."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 62.24,
            "end": 66.92,
            "text": " Most graphic programs use a counterclockwise standard but don't expect all of them to"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 66.92,
            "end": 67.92,
            "text": " use this."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 67.92,
            "end": 72.76,
            "text": " Now in order to put all of this into code, we just have to enable the face calling using"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 72.76,
            "end": 79.52,
            "text": " jail enable with jail call face, specify which face we want to keep, 99% of the time that"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 79.52,
            "end": 83.6,
            "text": " will be jail front, and then specify the standard we want to use."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 83.6,
            "end": 88.44,
            "text": " Again, I suggest using the counter clockwise one since from what I've seen is more common"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 88.44,
            "end": 89.92,
            "text": " than the clockwise one."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 89.92,
            "end": 94.0,
            "text": " Now if we run the program, you'll notice that when we get inside an object, we won't"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 94.0,
            "end": 99.96,
            "text": " be able to see it's inside since it contains the box of the triangles which is discarded."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 99.96,
            "end": 102.08,
            "text": " Therefore we only see the background."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 102.08,
            "end": 105.24,
            "text": " So let's see if this makes any difference in performance."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 105.24,
            "end": 110.0,
            "text": " For that we'll need an FPS counter which I'll display in the title of the window."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 110.0,
            "end": 114.72,
            "text": " Let's start by creating three doubles for the previous time, the current time, and the"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 114.72,
            "end": 116.4,
            "text": " difference of these two."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 116.4,
            "end": 121.24000000000001,
            "text": " Then we also want an unsigned integer that we like as a counter to see how many frames"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 121.24000000000001,
            "end": 123.28,
            "text": " we have in a certain amount of time."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 123.28,
            "end": 127.60000000000001,
            "text": " Now FPS is simply the amount of frames you get in a second."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 127.60000000000001,
            "end": 132.28,
            "text": " So that means that in order to get the FPS, we've encountered a number of frames we get"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 132.28,
            "end": 136.24,
            "text": " in a second, a frame being one loop in our main while loop."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 136.24,
            "end": 141.08,
            "text": " But that would also mean that our FPS will get updated only once a second."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 141.08,
            "end": 145.0,
            "text": " Instead let's update it every 30 of a second for example."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 145.0,
            "end": 150.4,
            "text": " To do that we just need to get a current time in seconds using gilfwgettime, the time"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 150.4,
            "end": 152.96,
            "text": " difference, and increment the counter."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 152.96,
            "end": 158.84,
            "text": " Then if the difference is higher or equal to a 30 of a second, we go ahead with the measurement"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 158.84,
            "end": 159.84,
            "text": " of the FPS."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 159.84,
            "end": 164.84,
            "text": " The FPS will simply be equal to one divided by the time difference which is just the amount"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 164.84,
            "end": 168.4,
            "text": " of frames in a second that this time difference gives."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 168.4,
            "end": 172.8,
            "text": " But the time difference contains multiple frames which are equal to the counter."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 172.8,
            "end": 176.16000000000003,
            "text": " So we also need to multiply it with the counter as well."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 176.16000000000003,
            "end": 180.8,
            "text": " Now we could stop here but it's also useful to know how long a frame takes in terms"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 180.8,
            "end": 182.36,
            "text": " of milliseconds."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 182.36,
            "end": 186.64000000000001,
            "text": " To do that we simply divide the time difference by the counter which gives us the number"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 186.64000000000001,
            "end": 191.12,
            "text": " of seconds of frame takes and then multiply it out by a thousand to transform it into"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 191.12,
            "end": 192.44,
            "text": " milliseconds."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 192.44,
            "end": 197.76000000000002,
            "text": " Then we simply put together the new title and apply it to the window using gilfwsetwindow"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 197.76000000000002,
            "end": 198.76000000000002,
            "text": " title."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 198.76,
            "end": 203.44,
            "text": " And we want to set the previous time as the current time in order to get the time difference"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 203.44,
            "end": 206.6,
            "text": " back to zero and also set the counter to zero."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 206.6,
            "end": 210.44,
            "text": " Now if you start your program you'll be able to see the amount of frames you have."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 210.44,
            "end": 215.32,
            "text": " If they are stuck on 60 then that means that you have v-sync on which rates to keep your"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 215.32,
            "end": 218.32,
            "text": " FPS constant to 60 frames per second."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 218.32,
            "end": 224.48,
            "text": " If you wish to disable this then write gilfwswapinterval0 in your main function."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 224.48,
            "end": 229.35999999999999,
            "text": " Keep in mind that this will only be able to deactivate v-sync if v-sync is not forced"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 229.35999999999999,
            "end": 231.04,
            "text": " by your graphics driver."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 231.04,
            "end": 234.72,
            "text": " In any case I recommend keeping it at 60 frames per second."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 234.72,
            "end": 238.64,
            "text": " But if you don't want to do that at least make sure that the functions that handle user"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 238.64,
            "end": 243.51999999999998,
            "text": " inputs are put into an if statement that works periodically like this one."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 243.51999999999998,
            "end": 249.04,
            "text": " Otherwise the responsiveness of your inputs will vary with your FPS which you do not want."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 249.04,
            "end": 253.92,
            "text": " And just to show that face calling improves your FPS here is a very high resolution model"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 253.92,
            "end": 256.0,
            "text": " and the difference in FPS."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 256.0,
            "end": 260.24,
            "text": " The difference is not big here but it's noticeable in the numbers."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 260.24,
            "end": 264.24,
            "text": " When you have multiple laddles and a lot of stuff happening the difference will become"
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 264.24,
            "end": 265.24,
            "text": " even more noticeable."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 265.24,
            "end": 269.8,
            "text": " That was it for this tutorial as always the source code is in the description."
        },
        {
            "number": "16",
            "title": "Face Culling & FPS Counter.mp4",
            "start": 269.8,
            "end": 270.0,
            "text": " Bye!"
        }
    ],
    "text": " Today I'll show you what face calling is and how it affects performance. We are also going to measure this performance change by making an FPS counter. So face calling is a step in the graphics pipeline that decides if a triangle will move onto the fragment shader, aka if the triangle will be drawn or not. Open jail decides this by seeing which side of the triangle is currently facing the camera. Generally speaking, in most 3D graphics programs it is the front side of a triangle that is sent to the fragment shader and the back side of a triangle that is discarded. The way open jail figures out which side is switched is by an index convention which can either be clockwise or counterclockwise. In a counterclockwise framework, if the order of the indices of a triangle are counterclockwise when facing us, then the side we see is the front side. Likewise, if the order of the indices of a triangle are clockwise when facing us, then the side we see is the back side. For a clockwise framework, it's the exact opposite. Most graphic programs use a counterclockwise standard but don't expect all of them to use this. Now in order to put all of this into code, we just have to enable the face calling using jail enable with jail call face, specify which face we want to keep, 99% of the time that will be jail front, and then specify the standard we want to use. Again, I suggest using the counter clockwise one since from what I've seen is more common than the clockwise one. Now if we run the program, you'll notice that when we get inside an object, we won't be able to see it's inside since it contains the box of the triangles which is discarded. Therefore we only see the background. So let's see if this makes any difference in performance. For that we'll need an FPS counter which I'll display in the title of the window. Let's start by creating three doubles for the previous time, the current time, and the difference of these two. Then we also want an unsigned integer that we like as a counter to see how many frames we have in a certain amount of time. Now FPS is simply the amount of frames you get in a second. So that means that in order to get the FPS, we've encountered a number of frames we get in a second, a frame being one loop in our main while loop. But that would also mean that our FPS will get updated only once a second. Instead let's update it every 30 of a second for example. To do that we just need to get a current time in seconds using gilfwgettime, the time difference, and increment the counter. Then if the difference is higher or equal to a 30 of a second, we go ahead with the measurement of the FPS. The FPS will simply be equal to one divided by the time difference which is just the amount of frames in a second that this time difference gives. But the time difference contains multiple frames which are equal to the counter. So we also need to multiply it with the counter as well. Now we could stop here but it's also useful to know how long a frame takes in terms of milliseconds. To do that we simply divide the time difference by the counter which gives us the number of seconds of frame takes and then multiply it out by a thousand to transform it into milliseconds. Then we simply put together the new title and apply it to the window using gilfwsetwindow title. And we want to set the previous time as the current time in order to get the time difference back to zero and also set the counter to zero. Now if you start your program you'll be able to see the amount of frames you have. If they are stuck on 60 then that means that you have v-sync on which rates to keep your FPS constant to 60 frames per second. If you wish to disable this then write gilfwswapinterval0 in your main function. Keep in mind that this will only be able to deactivate v-sync if v-sync is not forced by your graphics driver. In any case I recommend keeping it at 60 frames per second. But if you don't want to do that at least make sure that the functions that handle user inputs are put into an if statement that works periodically like this one. Otherwise the responsiveness of your inputs will vary with your FPS which you do not want. And just to show that face calling improves your FPS here is a very high resolution model and the difference in FPS. The difference is not big here but it's noticeable in the numbers. When you have multiple laddles and a lot of stuff happening the difference will become even more noticeable. That was it for this tutorial as always the source code is in the description. Bye!"
}