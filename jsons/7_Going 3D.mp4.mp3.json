{
    "chunks": [
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 0.0,
            "end": 3.68,
            "text": " In the last tutorial, I showed you how to add textures to your scene."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 3.68,
            "end": 9.200000000000001,
            "text": " Now, it's finally lived a boring 2D plane and a send to 3 dimensions."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 9.200000000000001,
            "end": 12.8,
            "text": " But first, a little correction for my past videos."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 12.8,
            "end": 19.52,
            "text": " In the VIO and texture class, I forgot to make the VBO and shader inputs references."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 19.52,
            "end": 22.48,
            "text": " So just add an and sign like so."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 22.48,
            "end": 23.76,
            "text": " Now for the main part."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 23.76,
            "end": 29.76,
            "text": " As I have mentioned before, open-jill restricts our coordinates to normalised coordinates."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 30.08,
            "end": 37.28,
            "text": " So in order to bypass this and enrich our coordinates with a wider range for 3 dimensions,"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 37.28,
            "end": 41.76,
            "text": " we can contract and expand the different coordinates using matrices."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 42.4,
            "end": 47.92,
            "text": " If you don't know much about matrices, then you should still be able to somewhat follow along."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 47.92,
            "end": 54.64,
            "text": " But I highly recommend you watch 3 blue 1 browns linear algebra playlist first."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 54.64,
            "end": 56.8,
            "text": " As it will help you later down the line."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 56.8,
            "end": 62.32,
            "text": " In any case, we'll be using this nice little library called GLM for our matrices."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 62.32,
            "end": 66.56,
            "text": " So go to this website, that's down in the description and click on download."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 66.56,
            "end": 69.6,
            "text": " Go to your library folder, then include."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 69.6,
            "end": 77.2,
            "text": " Now open up the zip file, go into GLM and now extract the folder named GLM into your include folder."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 77.2,
            "end": 82.16,
            "text": " Once that's done, go to your project and include the following parts of the library."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 82.16,
            "end": 84.72,
            "text": " That's it! We can now use matrices."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 84.72,
            "end": 85.12,
            "text": " Easy."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 85.76,
            "end": 87.60000000000001,
            "text": " All right, time to do it."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 87.84,
            "end": 94.72,
            "text": " So in order to get a nice 3D image in perspective, we need to apply different matrices to different"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 94.72,
            "end": 98.32000000000001,
            "text": " coordinates. Let's take a look at these types of coordinates."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 98.88000000000001,
            "end": 101.60000000000001,
            "text": " First, we have the local coordinates."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 101.60000000000001,
            "end": 106.48,
            "text": " These are the coordinates whose origin is the same as an object's origin."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 107.12,
            "end": 112.64,
            "text": " These are usually located at the centre of an object, but that's not always the case."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 113.36,
            "end": 118.56,
            "text": " Then we have the world coordinates whose origin is at the centre of the world."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 118.56,
            "end": 122.48,
            "text": " These coordinates usually contain the location of other objects."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 122.48,
            "end": 128.16,
            "text": " Next, we have the view coordinates which have the same origin as a camera or viewpoint."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 128.16,
            "end": 131.36,
            "text": " Notice that these do not yet account for perspective."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 131.36,
            "end": 136.64,
            "text": " Perspective is added in the next set of coordinates, which are the clip coordinates."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 136.64,
            "end": 140.72,
            "text": " These are essentially the same as the view coordinates, except the clip,"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 140.72,
            "end": 146.88,
            "text": " aka delete, and the vertices outside the normalized range, and can also account for perspective."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 147.52,
            "end": 152.48,
            "text": " And the final coordinates are the screen coordinates where everything is flattened out such that it"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 152.48,
            "end": 154.64,
            "text": " can be viewed on your screen."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 154.64,
            "end": 159.84,
            "text": " Now, in order to move from a coordinate system to the next, we make use of matrices."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 160.48,
            "end": 163.12,
            "text": " There are three main matrices we make use of."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 163.12,
            "end": 167.76,
            "text": " The model matrix, which takes local coordinates to world coordinates."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 168.23999999999998,
            "end": 174.88,
            "text": " The view matrix, which takes world coordinates to view coordinates, and the projection matrix,"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 174.88,
            "end": 178.16,
            "text": " which takes view coordinates to clip coordinates."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 178.16,
            "end": 184.0,
            "text": " The final transformation from clip coordinates to space coordinates is done automatically."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 184.0,
            "end": 189.6,
            "text": " All these matrices we are applying are 4D, but we won't have to actually write them"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 189.6,
            "end": 193.04,
            "text": " more cells since GLM can take care of that."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 193.04,
            "end": 195.12,
            "text": " So, let's create the model matrix."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 195.12,
            "end": 199.44,
            "text": " We serve by creating a variable called model of type mat4,"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 199.44,
            "end": 205.36,
            "text": " and equaling it to the identity matrix, which is simply mat4 1.0."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 205.92000000000002,
            "end": 210.48000000000002,
            "text": " This is called initialization, and it must be done, since otherwise,"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 210.48000000000002,
            "end": 216.88,
            "text": " the matrix is full of zeros, and an transformation we would apply on it would result in the same"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 216.88,
            "end": 221.20000000000002,
            "text": " empty matrix. Initialize the other two matrices as well."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 221.2,
            "end": 226.72,
            "text": " The model matrix can remain as it is since our object is in the center of the world,"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 226.72,
            "end": 229.2,
            "text": " coordinates, and that's fine for now."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 229.2,
            "end": 235.76,
            "text": " But right now, our camera is also in the center, so we want to move back and also be top."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 235.76,
            "end": 239.2,
            "text": " But it's not really us doing this, but the world itself."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 239.83999999999997,
            "end": 245.2,
            "text": " We are essentially moving the whole world around us instead of us moving around the whole world."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 245.92,
            "end": 250.23999999999998,
            "text": " In any case, to do this, we are going to use the function translate,"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 250.23999999999998,
            "end": 255.92,
            "text": " plugging in our view matrix, and the vector, which will indicate in which direction and how much"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 255.92,
            "end": 261.59999999999997,
            "text": " to move the whole world. Let's just move it down 0.5 and forward 2.0."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 262.32,
            "end": 268.64,
            "text": " Note that the z axis is positive towards us and negative away from us."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 268.64,
            "end": 273.76,
            "text": " And for the projection matrix, really is the perspective function plugging in the field of view"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 273.76,
            "end": 280.32,
            "text": " in radians, the aspect ratio of our screen, and the closest and furthest point we can see."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 280.32,
            "end": 286.15999999999997,
            "text": " In other words, if something is closer than 0.1 units to us, then it will be clipped,"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 286.15999999999997,
            "end": 291.44,
            "text": " and if it's further away than 100.0 units, it will again get clipped."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 291.44,
            "end": 296.71999999999997,
            "text": " You can see this in games when you are sometimes able to see through walls or characters"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 296.71999999999997,
            "end": 302.4,
            "text": " while bumping into them, or when objects disappear at far away distances."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 302.4,
            "end": 307.91999999999996,
            "text": " Notice that I've used the function radians to transform my degrees into radians."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 307.91999999999996,
            "end": 312.64,
            "text": " It's also created two variables for the width and height of our window,"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 312.64,
            "end": 315.44,
            "text": " so we can easily modify them from now on."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 315.44,
            "end": 320.08,
            "text": " Now all that's left to do is to import these matrices into the vertex shader."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 320.08,
            "end": 322.71999999999997,
            "text": " We can of course do this by using uniforms."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 322.71999999999997,
            "end": 328.71999999999997,
            "text": " So let's simply declare three uniforms of type mod 4, and assign them values in the main function,"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 328.8,
            "end": 335.28000000000003,
            "text": " like so. We first input their location, then one, then gel false, since we don't want open"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 335.28000000000003,
            "end": 342.32000000000005,
            "text": " gel to transpose them, and finally we need to use the function value ptr, which we give the matrix to."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 342.32000000000005,
            "end": 347.76000000000005,
            "text": " This is done so that we can point to the matrix object itself, not the data in it."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 347.76000000000005,
            "end": 352.24,
            "text": " Don't forget to have the shader activated before assigning these values."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 352.24,
            "end": 357.44000000000005,
            "text": " Then go back to the vertex shader and equal gel position to the projection matrix,"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 357.44,
            "end": 363.6,
            "text": " times the view matrix, times the model matrix, times a vague 4, whose 3D coordinates are a"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 363.6,
            "end": 369.52,
            "text": " post, and the fourth dimension is 1. Now if you run the program, you'll notice that things look"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 369.52,
            "end": 375.52,
            "text": " different, though you can't really see the perspective since the plane is flat and parallel to us."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 375.52,
            "end": 381.2,
            "text": " So let's make a pyramid. I'll start by setting the coordinates, colors, and texture coordinates,"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 381.2,
            "end": 386.64,
            "text": " then the indices, and finally I'll modify the gel draw elements function, which I'll"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 386.64,
            "end": 392.24,
            "text": " generalize like so, so we don't have to bother with it again. I'll also use this brick texture,"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 392.24,
            "end": 397.36,
            "text": " which you can find in the description. Now if you press run, we should see our pyramid,"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 397.36,
            "end": 403.52,
            "text": " but sadly it just looks like a triangle. So let's make it spin so that we can see it in its 3D"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 403.52,
            "end": 409.59999999999997,
            "text": " glory. We simply have to apply the rotation function to the model matrix, giving it the matrix we"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 409.6,
            "end": 416.24,
            "text": " want to modify, the rotation in radians, and the axis we want to rotate it about. In this case,"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 416.24,
            "end": 422.96000000000004,
            "text": " that would be straight up, so y equals 1. Then just create a simple timer that will change the"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 422.96000000000004,
            "end": 429.04,
            "text": " rotation by half a degree every 60 of a second. If you press run, you should see the pyramid spinning"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 429.04,
            "end": 434.96000000000004,
            "text": " around, but you'll also probably notice some weird glitches, that's because we're not telling"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 434.96,
            "end": 441.2,
            "text": " open gel to account for the depth of these triangles, so it's unsure which triangle to put on top"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 441.2,
            "end": 447.91999999999996,
            "text": " of which one. To fix that, we simply need to enable depth testing once, using gel-enable-gill-deft"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 447.91999999999996,
            "end": 455.03999999999996,
            "text": " test, and when we clear the gel color buffer bit, we should also clear the gel-deft buffer bit."
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 455.03999999999996,
            "end": 461.59999999999997,
            "text": " And now we're finally done and have a nice 3D spinning pyramid. Don't forget to add comments to"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 461.6,
            "end": 467.68,
            "text": " everything you've written to make sure you understand it, and as always, the source code is in the"
        },
        {
            "number": "7",
            "title": "Going 3D.mp4",
            "start": 467.68,
            "end": 469.20000000000005,
            "text": " description. Wait!"
        }
    ],
    "text": " In the last tutorial, I showed you how to add textures to your scene. Now, it's finally lived a boring 2D plane and a send to 3 dimensions. But first, a little correction for my past videos. In the VIO and texture class, I forgot to make the VBO and shader inputs references. So just add an and sign like so. Now for the main part. As I have mentioned before, open-jill restricts our coordinates to normalised coordinates. So in order to bypass this and enrich our coordinates with a wider range for 3 dimensions, we can contract and expand the different coordinates using matrices. If you don't know much about matrices, then you should still be able to somewhat follow along. But I highly recommend you watch 3 blue 1 browns linear algebra playlist first. As it will help you later down the line. In any case, we'll be using this nice little library called GLM for our matrices. So go to this website, that's down in the description and click on download. Go to your library folder, then include. Now open up the zip file, go into GLM and now extract the folder named GLM into your include folder. Once that's done, go to your project and include the following parts of the library. That's it! We can now use matrices. Easy. All right, time to do it. So in order to get a nice 3D image in perspective, we need to apply different matrices to different coordinates. Let's take a look at these types of coordinates. First, we have the local coordinates. These are the coordinates whose origin is the same as an object's origin. These are usually located at the centre of an object, but that's not always the case. Then we have the world coordinates whose origin is at the centre of the world. These coordinates usually contain the location of other objects. Next, we have the view coordinates which have the same origin as a camera or viewpoint. Notice that these do not yet account for perspective. Perspective is added in the next set of coordinates, which are the clip coordinates. These are essentially the same as the view coordinates, except the clip, aka delete, and the vertices outside the normalized range, and can also account for perspective. And the final coordinates are the screen coordinates where everything is flattened out such that it can be viewed on your screen. Now, in order to move from a coordinate system to the next, we make use of matrices. There are three main matrices we make use of. The model matrix, which takes local coordinates to world coordinates. The view matrix, which takes world coordinates to view coordinates, and the projection matrix, which takes view coordinates to clip coordinates. The final transformation from clip coordinates to space coordinates is done automatically. All these matrices we are applying are 4D, but we won't have to actually write them more cells since GLM can take care of that. So, let's create the model matrix. We serve by creating a variable called model of type mat4, and equaling it to the identity matrix, which is simply mat4 1.0. This is called initialization, and it must be done, since otherwise, the matrix is full of zeros, and an transformation we would apply on it would result in the same empty matrix. Initialize the other two matrices as well. The model matrix can remain as it is since our object is in the center of the world, coordinates, and that's fine for now. But right now, our camera is also in the center, so we want to move back and also be top. But it's not really us doing this, but the world itself. We are essentially moving the whole world around us instead of us moving around the whole world. In any case, to do this, we are going to use the function translate, plugging in our view matrix, and the vector, which will indicate in which direction and how much to move the whole world. Let's just move it down 0.5 and forward 2.0. Note that the z axis is positive towards us and negative away from us. And for the projection matrix, really is the perspective function plugging in the field of view in radians, the aspect ratio of our screen, and the closest and furthest point we can see. In other words, if something is closer than 0.1 units to us, then it will be clipped, and if it's further away than 100.0 units, it will again get clipped. You can see this in games when you are sometimes able to see through walls or characters while bumping into them, or when objects disappear at far away distances. Notice that I've used the function radians to transform my degrees into radians. It's also created two variables for the width and height of our window, so we can easily modify them from now on. Now all that's left to do is to import these matrices into the vertex shader. We can of course do this by using uniforms. So let's simply declare three uniforms of type mod 4, and assign them values in the main function, like so. We first input their location, then one, then gel false, since we don't want open gel to transpose them, and finally we need to use the function value ptr, which we give the matrix to. This is done so that we can point to the matrix object itself, not the data in it. Don't forget to have the shader activated before assigning these values. Then go back to the vertex shader and equal gel position to the projection matrix, times the view matrix, times the model matrix, times a vague 4, whose 3D coordinates are a post, and the fourth dimension is 1. Now if you run the program, you'll notice that things look different, though you can't really see the perspective since the plane is flat and parallel to us. So let's make a pyramid. I'll start by setting the coordinates, colors, and texture coordinates, then the indices, and finally I'll modify the gel draw elements function, which I'll generalize like so, so we don't have to bother with it again. I'll also use this brick texture, which you can find in the description. Now if you press run, we should see our pyramid, but sadly it just looks like a triangle. So let's make it spin so that we can see it in its 3D glory. We simply have to apply the rotation function to the model matrix, giving it the matrix we want to modify, the rotation in radians, and the axis we want to rotate it about. In this case, that would be straight up, so y equals 1. Then just create a simple timer that will change the rotation by half a degree every 60 of a second. If you press run, you should see the pyramid spinning around, but you'll also probably notice some weird glitches, that's because we're not telling open gel to account for the depth of these triangles, so it's unsure which triangle to put on top of which one. To fix that, we simply need to enable depth testing once, using gel-enable-gill-deft test, and when we clear the gel color buffer bit, we should also clear the gel-deft buffer bit. And now we're finally done and have a nice 3D spinning pyramid. Don't forget to add comments to everything you've written to make sure you understand it, and as always, the source code is in the description. Wait!"
}